import asyncio
import os
import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted, MessageNotModified

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bot –∏ –∫–ª–∏–µ–Ω—Ç—ã API –∏–∑ authorization.py
from authorization import bot, sp, youtube, lastfm_network # sp, youtube, lastfm_network –º–æ–≥—É—Ç –±—ã—Ç—å None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã-–∞–≥–µ–Ω—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ app.py
from app import (
    SpotifyAgent, 
    YouTubeAgent,
    generate_recommendations, 
)
from database import (
    save_track_rating,      # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Spotify ID
    check_user_has_ratings,
    add_user_mapping,
)

logger = logging.getLogger(__name__)

storage = MemoryStorage()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserActions(StatesGroup):
    waiting_for_track_name = State()
    waiting_for_search_selection = State() 

# --- –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤ ---
spotify_agent = SpotifyAgent(sp) 
youtube_agent = YouTubeAgent(youtube)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        KeyboardButton(text="üéß –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
        KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫")
    ]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False) 
    keyboard.add(*buttons)
    return keyboard

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ---
async def safe_delete_message(chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id, message_id)
    except (MessageToDeleteNotFound, MessageCantBeDeleted) as e_del:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e_del}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

async def send_audio_with_rating_prompt(chat_id: int, track_spotify_id: str, track_name: str, artist_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è Spotify ID."""
    loading_msg = None
    try:
        loading_msg = await bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        video_info = await youtube_agent.search_video(track_name, artist_name)

        if not video_info or 'id' not in video_info or 'videoId' not in video_info['id']:
            await bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube.")
            logger.warning(f"YouTubeAgent: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {track_name} - {artist_name}")
            return

        video_id = video_info['id']['videoId']
        youtube_url = f"https://www.youtube.com/watch?v={video_id}"
        
        audio_file_path = await youtube_agent.download_audio(youtube_url)

        if audio_file_path and os.path.exists(audio_file_path):
            logger.info(f"–ê—É–¥–∏–æ '{audio_file_path}' —Å–∫–∞—á–∞–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
            try:
                with open(audio_file_path, 'rb') as audio_file:
                    rate_button = InlineKeyboardButton("‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫", callback_data=f"rateprompt_{track_spotify_id}")
                    keyboard = InlineKeyboardMarkup().add(rate_button)
                    await bot.send_audio(chat_id, audio_file, 
                                         reply_markup=keyboard, 
                                         caption=f"üéß **{track_name}**\n_{artist_name}_",
                                         parse_mode=ParseMode.MARKDOWN)
                logger.info(f"–ê—É–¥–∏–æ –¥–ª—è Spotify ID {track_spotify_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {audio_file_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.")
            finally:
                logger.debug(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file_path}")
                try:
                    os.remove(audio_file_path)
                except OSError as e_os:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {audio_file_path}: {e_os}")
        else:
            logger.warning(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è YouTube URL: {youtube_url}")
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
    finally:
        if loading_msg:
            await safe_delete_message(chat_id, loading_msg.message_id)


def register_handlers(dp: Dispatcher):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤...")

    @dp.message_handler(commands=['start', 'help'])
    async def cmd_start(message: types.Message):
        telegram_user_id = message.chat.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /help")
        
        matrix_idx = await asyncio.to_thread(add_user_mapping, telegram_user_id) 
        if matrix_idx == -1:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} (matrix_idx={matrix_idx}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç.\n"
                            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

    @dp.message_handler(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫")
    async def find_track_command(message: types.Message):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ù–∞–π—Ç–∏ —Ç—Ä–µ–∫'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        await UserActions.waiting_for_track_name.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–º–æ–∂–Ω–æ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º):", reply_markup=types.ReplyKeyboardRemove())

    @dp.message_handler(state=UserActions.waiting_for_track_name)
    async def process_track_name_input(message: types.Message, state: FSMContext):
        track_query = message.text
        # telegram_user_id = message.chat.id # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∏—â–µ—Ç —Ç—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{track_query}'")

        if not spotify_agent.sp: 
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
            logger.error("Spotify –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            await state.finish()
            return

        found_spotify_tracks = await spotify_agent.search_track(track_query, limit=5)

        if found_spotify_tracks: 
            await state.update_data(search_results=found_spotify_tracks) 
            
            inline_kb = InlineKeyboardMarkup(row_width=1)
            for i, track_info in enumerate(found_spotify_tracks):
                button_text = f"{track_info['name']} - {track_info['artist_name']}"
                callback_action = f"selectsearch_{i}"
                inline_kb.add(InlineKeyboardButton(text=button_text, callback_data=callback_action))
            
            inline_kb.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞", callback_data="cancel_search_selection"))
            
            sent_message_with_choices = await message.reply("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω:", reply_markup=inline_kb)
            await state.update_data(choice_message_id=sent_message_with_choices.message_id)
            await UserActions.waiting_for_search_selection.set()
        else:
            logger.info(f"–¢—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{track_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Spotify.")
            await message.reply(f"–¢—Ä–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{track_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_main_keyboard())
            await state.finish()

    @dp.callback_query_handler(lambda call: call.data.startswith("selectsearch_") or call.data == "cancel_search_selection", state=UserActions.waiting_for_search_selection)
    async def process_search_selection(callback: types.CallbackQuery, state: FSMContext):
        user_data = await state.get_data()
        choice_message_id = user_data.get('choice_message_id')

        if choice_message_id:
            await safe_delete_message(callback.message.chat.id, choice_message_id)
        elif callback.message: 
             try: 
                await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=None)
                # –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
                # await safe_delete_message(callback.message.chat.id, callback.message.message_id) 
             except MessageNotModified: 
                pass # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–∂–µ –Ω–µ—Ç
                # await safe_delete_message(callback.message.chat.id, callback.message.message_id)
             except Exception as e_del_cb:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–∫–∞ (callback.message): {e_del_cb}")


        if callback.data == "cancel_search_selection":
            await bot.send_message(callback.from_user.id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
            await state.finish()
            await callback.answer()
            return

        try:
            selected_index = int(callback.data.split("_")[1])
            search_results = user_data.get('search_results')

            if not search_results or selected_index >= len(search_results):
                await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
                await state.finish()
                await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
                return

            selected_track = search_results[selected_index] 
            track_spotify_id = selected_track['id']
            track_name = selected_track['name']
            artist_name = selected_track['artist_name'] 

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç—Ä–µ–∫: {track_name} - {artist_name} (Spotify ID: {track_spotify_id}). –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ...")
            await send_audio_with_rating_prompt(callback.from_user.id, track_spotify_id, track_name, artist_name)
            await bot.send_message(callback.from_user.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
            await bot.send_message(callback.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–∫–∞.", reply_markup=get_main_keyboard())
        finally:
            await state.finish()
            await callback.answer()


    @dp.callback_query_handler(lambda call: call.data.startswith("rateprompt_"))
    async def callback_prompt_rating(callback: types.CallbackQuery):
        track_spotify_id = callback.data.split("_")[1] 
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫' –¥–ª—è Spotify ID={track_spotify_id}")

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫" —Å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message:
            try:
                await bot.edit_message_reply_markup(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    reply_markup=None 
                )
            except MessageNotModified:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ —É–∂–µ –Ω–µ –∏–º–µ–ª–æ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            except Exception as e_edit:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å reply_markup –¥–ª—è –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è: {e_edit}")
        
        buttons = [
            InlineKeyboardButton(str(num), callback_data=f"setrating_{track_spotify_id}_{num}")
            for num in range(1, 6)
        ]
        keyboard = InlineKeyboardMarkup(row_width=5).add(*buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
        await bot.send_message(
            chat_id=callback.from_user.id, 
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫ –æ—Ç 1 –¥–æ 5 (–≥–¥–µ 5 - –æ—Ç–ª–∏—á–Ω–æ):",
            reply_markup=keyboard
        )
        await callback.answer()


    @dp.callback_query_handler(lambda call: call.data.startswith("setrating_"))
    async def callback_set_rating(callback: types.CallbackQuery):
        parts = callback.data.split("_")
        track_spotify_id = parts[1] 
        rating = int(parts[2])
        telegram_user_id = callback.from_user.id

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –æ—Ü–µ–Ω–∏–ª Spotify ID='{track_spotify_id}' –Ω–∞ {rating}")
        
        await asyncio.to_thread(save_track_rating, telegram_user_id, track_spotify_id, rating)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫...")
        if callback.message:
            await safe_delete_message(callback.message.chat.id, callback.message.message_id)
        
        await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É ({rating})! üëç", show_alert=False)
        
        await bot.send_message(telegram_user_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=get_main_keyboard())


    @dp.message_handler(text="üéß –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    async def get_recommendations_command(message: types.Message):
        telegram_user_id = message.chat.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
        
        loading_msg = None
        try:
            if not await asyncio.to_thread(check_user_has_ratings, telegram_user_id):
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤.", reply_markup=get_main_keyboard())
                return

            loading_msg = await message.reply("–ü–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. üé∂")
            
            recs = await generate_recommendations(telegram_user_id) 

            if not recs:
                logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
                await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤.", reply_markup=get_main_keyboard())
                return

            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {telegram_user_id}.")
            await message.reply(f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è ({len(recs)} —à—Ç.):", reply_markup=get_main_keyboard())

            for i, track_data in enumerate(recs): 
                track_spotify_id = track_data['track_id'] 
                track_name = track_data['track_name']
                artist_display_name = ", ".join(track_data.get('artist_names', ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"]))
                spotify_url = track_data.get('spotify_url', '')
                
                caption = f"‚ú® **{track_name}**\nüë§ _{artist_display_name}_"
                if spotify_url and spotify_url != "N/A":
                    caption += f"\n[–°–ª—É—à–∞—Ç—å –Ω–∞ Spotify]({spotify_url})"

                play_button = InlineKeyboardButton("üéµ –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å", callback_data=f"playrecom_{track_spotify_id}")
                keyboard = InlineKeyboardMarkup().add(play_button)
                
                await bot.send_message(message.chat.id, caption, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
                if i < len(recs) - 1:
                    await asyncio.sleep(0.5)
        finally:
            if loading_msg:
                await safe_delete_message(message.chat.id, loading_msg.message_id)


    @dp.callback_query_handler(lambda call: call.data.startswith("playrecom_"))
    async def callback_play_recommended_track(callback: types.CallbackQuery):
        track_spotify_id = callback.data.split("_")[1] 
        telegram_user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–ª—É—à–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π Spotify ID='{track_spotify_id}'")

        if callback.message: # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º
             await safe_delete_message(callback.message.chat.id, callback.message.message_id)

        if not spotify_agent.sp: 
            await bot.send_message(telegram_user_id, "–°–µ—Ä–≤–∏—Å –º—É–∑—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_keyboard())
            await callback.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        track_details = await spotify_agent.get_track_basic_info(track_spotify_id)

        if track_details:
            await send_audio_with_rating_prompt(
                telegram_user_id,
                track_spotify_id, 
                track_details['name'],
                track_details['artist_name'] 
            )
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å Spotify –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ ID='{track_spotify_id}'")
            await bot.send_message(telegram_user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç—Ä–µ–∫–µ.", reply_markup=get_main_keyboard())
        
        await callback.answer()

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def main():
    if not bot:
        logger.critical("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ authorization.py! –í—ã—Ö–æ–¥.")
        return
    
    if not sp:
        logger.warning("–ö–ª–∏–µ–Ω—Ç Spotify (sp) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ authorization.py.")
    if not youtube:
        logger.warning("–ö–ª–∏–µ–Ω—Ç YouTube (youtube) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ authorization.py.")
    if not lastfm_network: 
        logger.warning("–ö–ª–∏–µ–Ω—Ç Last.fm (lastfm_network) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ authorization.py.")

    dp = Dispatcher(bot, storage=storage)
    register_handlers(dp)

    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    try:
        await dp.start_polling()
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
        await dp.storage.close()
        await dp.storage.wait_closed()
        session = await bot.get_session()
        if session:
            await session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

